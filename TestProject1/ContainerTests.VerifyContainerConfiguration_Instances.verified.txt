[
  {
    Instance: {
      Constructor: Foo.ctor(),
      ResolverBaseType: TransientResolver<T>,
      IsOnlyOneOfServiceType: true,
      IsExplicitlyNamed: true,
      ServiceType: Foo,
      ImplementationType: Foo,
      Lifetime: Transient,
      Name: a,
      HasPlanned: true,
      PlanningSucceeded: true,
      IsDefault: true
    },
    Lifetime: Transient,
    Name: a,
    ImplementationType: Foo,
    ServiceType: Foo
  },
  {
    Instance: {
      IsOnlyOneOfServiceType: true,
      IsExplicitlyNamed: false,
      ServiceType: IContainer,
      ImplementationType: IContainer,
      Lifetime: Scoped,
      Name: IContainer,
      HasPlanned: true,
      PlanningSucceeded: true,
      IsDefault: true
    },
    Lifetime: Scoped,
    Name: IContainer,
    ImplementationType: IContainer,
    ServiceType: IContainer
  },
  {
    Instance: {
      IsOnlyOneOfServiceType: true,
      IsExplicitlyNamed: false,
      ServiceType: IServiceContext,
      ImplementationType: IServiceContext,
      Lifetime: Scoped,
      Name: IServiceContext,
      HasPlanned: true,
      PlanningSucceeded: true,
      IsDefault: true
    },
    Lifetime: Scoped,
    Name: IServiceContext,
    ImplementationType: IServiceContext,
    ServiceType: IServiceContext
  },
  {
    Instance: {
      IsOnlyOneOfServiceType: true,
      IsExplicitlyNamed: false,
      ServiceType: IServiceProvider,
      ImplementationType: IServiceProvider,
      Lifetime: Scoped,
      Name: IServiceProvider,
      HasPlanned: true,
      PlanningSucceeded: true,
      IsDefault: true
    },
    Lifetime: Scoped,
    Name: IServiceProvider,
    ImplementationType: IServiceProvider,
    ServiceType: IServiceProvider
  },
  {
    Instance: {
      IsOnlyOneOfServiceType: true,
      IsExplicitlyNamed: false,
      ServiceType: IServiceScopeFactory,
      ImplementationType: IServiceScopeFactory,
      Name: IServiceScopeFactory,
      HasPlanned: true,
      PlanningSucceeded: true,
      IsDefault: true
    },
    Name: IServiceScopeFactory,
    ImplementationType: IServiceScopeFactory,
    ServiceType: IServiceScopeFactory
  },
  {
    Instance: {
      IsOnlyOneOfServiceType: true,
      IsExplicitlyNamed: false,
      ServiceType: Scope,
      ImplementationType: Scope,
      Lifetime: Scoped,
      Name: Scope,
      HasPlanned: true,
      PlanningSucceeded: true,
      IsDefault: true
    },
    Lifetime: Scoped,
    Name: Scope,
    ImplementationType: Scope,
    ServiceType: Scope
  },
  {
    Instance: {
      ErrorMessages: [        
Cannot fill the dependencies of any of the public constructors
Available constructors:new TestClass(IOptions<LamarTestground.TestOptions> options, Foo dep)
* IOptions<LamarTestground.TestOptions> is not registered within this container and cannot be auto discovered by any missing family policy

      ],
      InlineDependencies: [
        {
          Factory: {
            Type: Func<IServiceContext, Foo>,
            Target: DependencyExpression<Foo>.<>c__DisplayClass11_0,
            Method: LamarTestground.Foo Named(Lamar.IServiceContext)
          },
          IsOnlyOneOfServiceType: false,
          IsExplicitlyNamed: false,
          ServiceType: Foo,
          ImplementationType: Foo,
          Lifetime: Transient,
          Name: Foo,
          HasPlanned: false,
          PlanningSucceeded: false,
          IsDefault: false
        }
      ],
      ResolverBaseType: TransientResolver<T>,
      IsOnlyOneOfServiceType: true,
      IsExplicitlyNamed: false,
      ServiceType: ITestClass,
      ImplementationType: TestClass,
      Lifetime: Transient,
      Name: testClass,
      HasPlanned: true,
      PlanningSucceeded: false,
      IsDefault: true
    },
    Lifetime: Transient,
    Name: testClass,
    ImplementationType: TestClass,
    ServiceType: ITestClass
  }
]